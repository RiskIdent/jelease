# SPDX-FileCopyrightText: 2022 Risk.Ident GmbH <contact@riskident.com>
#
# SPDX-License-Identifier: CC0-1.0

## To make this portable, change the ./jelease.schema.json to:
##   https://github.com/RiskIdent/jelease/raw/main/jelease.schema.json
# yaml-language-server: $schema=./jelease.schema.json

# This is the default config embedded into the program.
# Can be overridden with a different file at:
#
#   /etc/jelease/jelease.yaml
#   ~/.config/jelease.yaml
#   ~/.jelease.yaml
#   jelease.yaml (in current directory)

# If set to true, or if `--dryrun` flag is passed, then the program will not
# perform any persisting actions. I.e, it will not push any changes via Git,
# not create any GitHub pull requests, and not create any Jira tickets.
dryRun: false

# Definitons of how to update packages, based on package name.
packages:
  - name: foobar
    repos:
      - url: tmp/upstream-test
        patches:
          - file: go.mod
            regex:
              match: '(github.com/joho/godotenv) v.*'
              replace: '{{ index .Groups 1 }} {{ .Version }}'

# GitHub settings
github:
  # Allows targeting a GitHub Enterprise (self-hosted or cloud) server.
  # If set, it will add the /api/v3/ to the end of the path if missing.
  # If unset, it will use https://api.github.com/v3/.
  url: # https://github.example.com

  # Temporary directory to store cloned repositories.
  # On Unix systems, it returns $TMPDIR if non-empty, else /tmp.
  # On Windows, it uses GetTempPath, returning the first non-empty
  #   value from %TMP%, %TEMP%, %USERPROFILE%, or the Windows directory.
  # On Plan 9, it returns /tmp.
  tempDir:

  # Config for how to authenticate with GitHub
  auth:
    type: pat # only "pat" supported
    token: abc123xyz # Generate new token at: https://github.com/settings/tokens

  pr:
    title: |-
      {{ with .JiraIssue }}[{{ . }}] {{ end -}}
      Update `{{ .Package }}` to {{ .Version }}
    description: |
      {{ with .JiraIssue }}
      Jira issue: {{ . }}
      {{ end }}

      Changed version of `{{ .Package }}` to {{ .Version }}

      <sub>

      > Update PR generated by [Jelease](https://github.com/RiskIdent/jelease).

      </sub>
    branch: 'jelease/{{ .Package | sanitizePathSegment }}-{{ .Version | sanitizePathSegment }}'
    commit: |-
      {{ with .JiraIssue }}[{{ . }}] {{ end -}}
      Update `{{ .Package }}` to {{ .Version }}

    # Committer details used when creating the Git commit.
    # To disable this override, set both fields to null or empty strings,
    # and then Jelease would instead rely on the user.name and user.email
    # configs from your .gitconfig file.
    committer:
      name: Jelease[bot]
      email: jelease@riskident.com

# Jira settings
jira:
  # Sets the Jira URL. If you host Jira under a different base path (e.g /jira)
  # then you need to include that in the URL, like so:
  #   url: https://issues.apache.org/jira/
  #
  # If when browsing the Jira your URL says:
  #   https://jira.example.com/secure/Dashboard.jspa
  # then you should set the URL to:
  #   url: https://jira.example.com
  #
  # However, if it says:
  #   https://jira.example.com/jira/secure/Dashboard.jspa
  # then you should set the URL to:
  #   url: https://jira.example.com/jira
  url: https://jira.example.com

  # (INSECURE) Disables TLS/SSL certificate verification for HTTPS traffic.
  # This can be VERY DANGEROUS, and should never be disabled
  # (i.e this config set to true) on a production system.
  skipCertVerify: false

  # Config for how to authenticate with Jira
  auth:
    type: pat # pat | token
    token: abc123xyz
    user: '' # Unused if auth type is "pat"

  # Jira issue/ticket creation config
  issue:
    labels:
      - jelease
      - update
    status: Backlog
    description: |
      Update issue generated by https://github.com/RiskIdent/jelease using newreleases.io
    type: Task # e.g Task, Bug, Story
    project: ''
    projectNameCustomField: 1084

    comments:
      updatedIssue: |-
        (i) This Jira issue was updated to *{{ .Version }}*.

      prCreated: |-
        New pull requests updating *{{ .Package }}* to *{{ .Version }}*:
        {{ range .PullRequests }}
        (+) [{{ .URL }}]
        {{ end }}

      prFailed: |-
        (!) {color:#DE350B}Failed to apply patches for updating *{{ .Package }}* to *{{ .Version }}*.{color}

        Error:
        {code}
        {{ .Error }}
        {code}

      noConfig: >-
        {color:#505F79}(i) _No config found for package *{{ .Package }}*.
        You can add some to automatically create PRs with the update._{color}

      noPatches: >-
        {color:#505F79}(i) _Config found for package *{{ .Package }}*,
        but no patches were applied._{color}


# HTTP server settings. The HTTP server is used to accept webhooks from
# newreleases.io and GitHub.
http:
  port: 8080

# Console logging settings.
log:
  format: pretty # pretty | json
  level: debug # trace | debug | info | warn | error | fatal | panic
