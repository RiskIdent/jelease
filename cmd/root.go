// SPDX-FileCopyrightText: 2022 Risk.Ident GmbH <contact@riskident.com>
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
)

var (
	config Config
)

var rootCmd = &cobra.Command{
	Use:           "jelease",
	SilenceErrors: true,
	SilenceUsage:  true,
}

func Execute() {
	if err := configSetup(); err != nil {
		log.Error().Err(err).Msg("Failed to setup configs.")
		os.Exit(1)
	}

	err := rootCmd.Execute()
	if err != nil {
		log.Error().Msgf("Failed: %s", err)
		os.Exit(1)
	}
}

// Config contains configuration values from environment and .env file.
// Environment takes precedence over the .env file in case of conflicts.
type Config struct {
	// connection and auth
	AuthType       string `envconfig:"JELEASE_AUTH_TYPE" required:"true"`
	JiraToken      string `envconfig:"JELEASE_JIRA_TOKEN" required:"true"`
	JiraURL        string `envconfig:"JELEASE_JIRA_URL" required:"true"`
	JiraUser       string `envconfig:"JELEASE_JIRA_USER" required:"true"`
	Port           int    `envconfig:"JELEASE_PORT" default:"8080"`
	SkipCertVerify bool   `envconfig:"JELEASE_INSECURE_SKIP_CERT_VERIFY" default:"false"`

	// ticket creation
	AddLabels              []string `envconfig:"JELEASE_ADD_LABELS"`
	DefaultStatus          string   `envconfig:"JELEASE_DEFAULT_STATUS" required:"true"`
	DryRun                 bool     `envconfig:"JELEASE_DRY_RUN" default:"false"`
	IssueDescription       string   `envconfig:"JELEASE_ISSUE_DESCRIPTION" default:"Update issue generated by https://github.com/RiskIdent/jelease using newreleases.io"`
	IssueType              string   `envconfig:"JELEASE_ISSUE_TYPE" default:"Story"`
	Project                string   `envconfig:"JELEASE_PROJECT" required:"true"`
	ProjectNameCustomField uint     `envconfig:"JELEASE_PROJECT_NAME_CUSTOM_FIELD"`

	// logging
	LogFormat string `envconfig:"JELEASE_LOG_FORMAT" default:"pretty"`
	LogLevel  string `envconfig:"JELEASE_LOG_LEVEL" default:"debug"`
}

func configSetup() error {
	dotEnvErr := godotenv.Load()

	err := envconfig.Process("jelease", &config)
	if err != nil {
		loggerSetup() // need to be setup before returning
		return err
	}
	if err := loggerSetup(); err != nil {
		return err
	}

	if os.IsNotExist(dotEnvErr) {
		log.Debug().Msg("No .env file found.")
	} else if dotEnvErr != nil {
		return dotEnvErr
	}

	log.Debug().
		Str("url", config.JiraURL).
		Uint("customField", config.ProjectNameCustomField).
		Msg("Loaded configuration.")

	return nil
}

func loggerSetup() error {
	pretty := log.Output(zerolog.ConsoleWriter{
		Out:        os.Stdout,
		TimeFormat: "Jan-02 15:04",
	})
	switch strings.ToLower(config.LogFormat) {
	case "json":
		log.Logger = zerolog.New(os.Stderr).With().Timestamp().Logger()
	case "pretty":
		log.Logger = pretty
	default:
		log.Logger = pretty
		return fmt.Errorf("invalid log format %q, must be one of [json, pretty]", config.LogFormat)
	}

	if config.LogLevel != "" {
		level, err := zerolog.ParseLevel(config.LogLevel)
		if err != nil {
			return err
		}
		log.Logger = log.Level(level)
	}
	return nil
}
